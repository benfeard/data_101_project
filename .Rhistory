knitr::opts_chunk$set(echo = TRUE)
#Read the data
firefighters <- read.csv("database.csv", na.strings = c(""," ","NA"))    # read and set as NA the empty or space-containing cells
#Structure of the data
str(firefighters) # which is a data frame of 2005 observations and 14 character variables
#First row
head(firefighters, 1)
#Last row
tail(firefighters, 1)
library("tidyverse")
firefighters[which(is.na(firefighters$Last.Name)),]      ## which row has Last.Name: "NA";  show the row
# remove row 762 and column "X"
firefighters <- firefighters[-762, c(1:13)]
str(firefighters) # leaving 2004 records and 13 variables
firefighters2 <- select(firefighters, -c(2, 4))
firefighters2$Age <- sapply(firefighters2$Age, as.integer)
firefighters2$Date.of.Death <- as.Date(firefighters$Date.of.Death, "%b %d, %Y")
firefighters2$Date.of.Incident <- as.Date(firefighters$Date.of.Incident, "%b %d, %Y")
l1 <- c("Classification", "Cause.Of.Death", "Nature.Of.Death", "Duty", "Activity", "Property.Type", "Emergency")
firefighters2[, l1] <- lapply(firefighters2[, l1], factor)
str(firefighters2)
firefighters2 <- mutate(firefighters2, Days.After.Incident = Date.of.Death - Date.of.Incident)
str(firefighters2$Days.After.Incident)
library(gender)
library(genderdata)
firefighters3 <- mutate(firefighters2,veryfirstname = word(First.Name))
# add a column with the first word of the First.Names so that gender() and left_join() are not confused by double first names
name_gender<-gender(firefighters3$veryfirstname, years = c("1932", "2012"), method = "ssa") %>% unique()  # create name_gender list
firefighters2 <- left_join(firefighters3, name_gender[,c(1,4)], by = c("veryfirstname" = "name"))  # join the two dataframes, adding column gender to firefighters2
group_by(firefighters2, gender) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
fire_11 <- filter(firefighters2, Date.of.Death == "2001-09-11")
fire_wild <- filter(firefighters2, str_detect(Classification, "^Wildland"))
fire_main <- filter(firefighters2, Date.of.Death != "2001-09-11" & !str_detect(Classification, "^Wildland"))
dim(fire_11)
dim(fire_wild)
dim(fire_main)  # show the number of rows and columns in each subset
hist(as.integer(fire_main$Age), main="Age of Death in the Main Firefighter sample", xlab="Age")       # show the distribution of age of death across the main firefighter population
age_class <- select(fire_main, Age, Classification) %>% na.exclude %>% filter(Classification == "Career" | Classification == "Volunteer") %>% arrange(Classification)
group_by(age_class, Classification) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
ggplot(fire_main, aes(x=Classification, y=Age)) + geom_boxplot(fill="slateblue", alpha=0.2) + xlab("Career Class")
ggplot(fire_wild, aes(x=Age)) + geom_histogram(binwidth = 1)
mean(na.omit(fire_wild$Age))
sd(na.omit(fire_wild$Age))
group_by(fire_wild, Classification) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
ggplot(fire_main, aes(x=Emergency)) + geom_histogram(stat="count")
fire_main %>% drop_na(Duty) %>% ggplot() + geom_histogram(aes(x=Duty), stat = "count")
group_by(fire_main, Duty) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
ggplot(fire_main) + aes(x = Duty, fill = factor(Classification)) + geom_bar(position = "fill") + coord_flip() + ggtitle("Firefighter Fatalities Based On Duty By Classifications")
group_by(fire_main, Cause.Of.Death) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
stress <- filter(fire_main, Cause.Of.Death == "Stress/Overexertion")
ggplot(stress, aes(x=Age)) + geom_histogram(binwidth=3) + ggtitle("Cause of Death: Stress/Overexertion")
top_4_cause <- filter(fire_main, Cause.Of.Death == c("Stress/Overexertion", "Impact", "Vehicle Collision", "Trapped"))
ggplot(top_4_cause, aes(x=Cause.Of.Death, y=Age)) + geom_boxplot(fill="slateblue", alpha=0.2) + ggtitle("Top 4 Causes of Death")
fire_main %>% select(Age, Days.After.Incident) %>% na.omit() %>% ggplot(aes(x=Age, y=Days.After.Incident)) + geom_point() + geom_smooth(method = lm) + ggtitle("Age vs Days Surviving After Fatal Incident") + xlab("Age (years)") + ylab("Surviving Days After Fatal Incident")
head(fire_main %>% group_by(Days.After.Incident) %>% summarize(total = n()))
fire_main %>% filter(Days.After.Incident == -1) %>% select(1:5)
x <- fire_main$Age
y <- as.numeric(fire_main$Days.After.Incident)
model <- lm(y~x)
summary(model)
ggplot(fire_main, aes(x=Date.of.Incident, y=Age)) + geom_point()
fire_main %>% drop_na(gender) %>% filter(Date.of.Incident >= as.Date("2000-01-01")) %>%ggplot(aes(x=Date.of.Incident, y=Age, color=gender)) + geom_point() + geom_smooth(method=lm) + labs(title = "Age at Fatal Incident over Time", subtitle = "Non-wildland Firefighters") + xlab("Date (years)") + ylab("Age (years)")
fire_wild %>% drop_na(gender) %>% filter(Date.of.Incident >= as.Date("2000-01-01")) %>% ggplot(aes(x=Date.of.Incident, y=Age, color=gender)) + geom_point() + geom_smooth(method=lm) + labs(title = "Age at Fatal Incident over Time", subtitle = "Wildland Firefighters") + xlab("Date (years)") + ylab("Age (years)")
fire_main %>% drop_na(Date.of.Incident) %>% ggplot() + geom_histogram(aes(x=format(Date.of.Death, "%Y")), stat = "count") + labs(title = "Fatalities over Time", subtitle = "Non-wildland Firefighters") + xlab("Year") + ylab("Total Deaths")
fire_wild %>% drop_na(Date.of.Incident) %>% ggplot() + geom_histogram(aes(x=format(Date.of.Death, "%Y")), stat = "count") + labs(title = "Fatalities over Time", subtitle = "Wildland Firefighters") + xlab("Year") + ylab("Total Deaths")
levels(firefighters2$Activity)
levels(firefighters2$Activity)
levels(firefighters2$Cause.Of.Death)
levels(firefighters2$Nature.Of.Death)
levels(firefighters2$Property.Type)
knitr::opts_chunk$set(echo = TRUE)
#Read the data
firefighters <- read.csv("database.csv", na.strings = c(""," ","NA"))    # read and set as NA the empty or space-containing cells
#Structure of the data
str(firefighters) # which is a data frame of 2005 observations and 14 character variables
#First row
head(firefighters, 1)
#Last row
tail(firefighters, 1)
library("tidyverse")
firefighters[which(is.na(firefighters$Last.Name)),]      ## which row has Last.Name: "NA";  show the row
View(firefighters)
View(firefighters)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (class(lastname) != "character"){
toRemove <- c(toRemove, index)
}
}
toRemove
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
lastname
if (class(lastname) != "character"){
toRemove <- c(toRemove, index)
}
}
toRemove
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
lastname
if (class(lastname) != "character"){
toRemove <- c(toRemove, index)
}
}
toRemove
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (!is.character(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters$Last.Name[3]
lastname <- firefighters$Last.Name[3]
lastname
is.character(lastname)
lastname <- firefighters$Last.Name[762]
lastname
is.character(lastname)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-toRemove]
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-toRemove]
str(firefighters)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-c(toRemove)]
str(firefighters)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-(toRemove)]
str(firefighters)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-762]
str(firefighters)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-762]
str(firefighters)
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-toRemove, ]
str(firefighters)
knitr::opts_chunk$set(echo = TRUE)
#Read the data
firefighters <- read.csv("database.csv", na.strings = c(""," ","NA"))    # read and set as NA the empty or space-containing cells
#Structure of the data
str(firefighters) # which is a data frame of 2005 observations and 14 character variables
#First row
head(firefighters, 1)
#Last row
tail(firefighters, 1)
library("tidyverse")
firefighters[which(is.na(firefighters$Last.Name)),]      ## which row has Last.Name: "NA";  show the row
# remove row 762 and column "X"
#firefighters <- firefighters[-762, c(1:13)]
#str(firefighters) # leaving 2004 records and 13 variables
# Alternatively, search for the incorrect column and then remove the extra column later when select columns useful for analysis
toRemove = c()
for (index in seq_along(firefighters$Last.Name)) {
lastname <- firefighters$Last.Name[index]
if (is.na(lastname)){
toRemove <- c(toRemove, index)
}
}
toRemove
firefighters <- firefighters[-toRemove, ]
str(firefighters)
firefighters2 <- select(firefighters, -c(2, 4))
firefighters2$Age <- sapply(firefighters2$Age, as.integer)
firefighters2$Date.of.Death <- as.Date(firefighters$Date.of.Death, "%b %d, %Y")
firefighters2$Date.of.Incident <- as.Date(firefighters$Date.of.Incident, "%b %d, %Y")
l1 <- c("Classification", "Cause.Of.Death", "Nature.Of.Death", "Duty", "Activity", "Property.Type", "Emergency")
firefighters2[, l1] <- lapply(firefighters2[, l1], factor)
str(firefighters2)
firefighters2 <- mutate(firefighters2, Days.After.Incident = Date.of.Death - Date.of.Incident)
str(firefighters2$Days.After.Incident)
levels(firefighters2$Activity)
levels(firefighters2$Cause.Of.Death)
levels(firefighters2$Nature.Of.Death)
levels(firefighters2$Property.Type)
library(gender)
library(genderdata)
firefighters3 <- mutate(firefighters2,veryfirstname = word(First.Name))
# add a column with the first word of the First.Names so that gender() and left_join() are not confused by double first names
name_gender<-gender(firefighters3$veryfirstname, years = c("1932", "2012"), method = "ssa") %>% unique()  # create name_gender list
firefighters2 <- left_join(firefighters3, name_gender[,c(1,4)], by = c("veryfirstname" = "name"))  # join the two dataframes, adding column gender to firefighters2
group_by(firefighters2, gender) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
fire_11 <- filter(firefighters2, Date.of.Death == "2001-09-11")
fire_wild <- filter(firefighters2, str_detect(Classification, "^Wildland"))
fire_main <- filter(firefighters2, Date.of.Death != "2001-09-11" & !str_detect(Classification, "^Wildland"))
dim(fire_11)
dim(fire_wild)
dim(fire_main)  # show the number of rows and columns in each subset
hist(as.integer(fire_main$Age), main="Age of Death in the Main Firefighter sample", xlab="Age")       # show the distribution of age of death across the main firefighter population
age_class <- select(fire_main, Age, Classification) %>% na.exclude %>% filter(Classification == "Career" | Classification == "Volunteer") %>% arrange(Classification)
group_by(age_class, Classification) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
ggplot(fire_main, aes(x=Classification, y=Age)) + geom_boxplot(fill="slateblue", alpha=0.2) + xlab("Career Class")
ggplot(fire_wild, aes(x=Age)) + geom_histogram(binwidth = 1)
mean(na.omit(fire_wild$Age))
sd(na.omit(fire_wild$Age))
group_by(fire_wild, Classification) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
ggplot(fire_main, aes(x=Emergency)) + geom_histogram(stat="count")
fire_main %>% drop_na(Duty) %>% ggplot() + geom_histogram(aes(x=Duty), stat = "count")
group_by(fire_main, Duty) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
ggplot(fire_main) + aes(x = Duty, fill = factor(Classification)) + geom_bar(position = "fill") + coord_flip() + ggtitle("Firefighter Fatalities Based On Duty By Classifications")
group_by(fire_main, Cause.Of.Death) %>% summarize(mean_age = mean(as.numeric(Age), na.rm = TRUE), sd_age = sd(as.numeric(Age), na.rm = TRUE), total = n())
stress <- filter(fire_main, Cause.Of.Death == "Stress/Overexertion")
ggplot(stress, aes(x=Age)) + geom_histogram(binwidth=3) + ggtitle("Cause of Death: Stress/Overexertion")
top_4_cause <- filter(fire_main, Cause.Of.Death == c("Stress/Overexertion", "Impact", "Vehicle Collision", "Trapped"))
ggplot(top_4_cause, aes(x=Cause.Of.Death, y=Age)) + geom_boxplot(fill="slateblue", alpha=0.2) + ggtitle("Top 4 Causes of Death")
fire_main %>% select(Age, Days.After.Incident) %>% na.omit() %>% ggplot(aes(x=Age, y=Days.After.Incident)) + geom_point() + geom_smooth(method = lm) + ggtitle("Age vs Days Surviving After Fatal Incident") + xlab("Age (years)") + ylab("Surviving Days After Fatal Incident")
head(fire_main %>% group_by(Days.After.Incident) %>% summarize(total = n()))
fire_main %>% filter(Days.After.Incident == -1) %>% select(1:5)
x <- fire_main$Age
y <- as.numeric(fire_main$Days.After.Incident)
model <- lm(y~x)
summary(model)
ggplot(fire_main, aes(x=Date.of.Incident, y=Age)) + geom_point()
fire_main %>% drop_na(gender) %>% filter(Date.of.Incident >= as.Date("2000-01-01")) %>%ggplot(aes(x=Date.of.Incident, y=Age, color=gender)) + geom_point() + geom_smooth(method=lm) + labs(title = "Age at Fatal Incident over Time", subtitle = "Non-wildland Firefighters") + xlab("Date (years)") + ylab("Age (years)")
fire_wild %>% drop_na(gender) %>% filter(Date.of.Incident >= as.Date("2000-01-01")) %>% ggplot(aes(x=Date.of.Incident, y=Age, color=gender)) + geom_point() + geom_smooth(method=lm) + labs(title = "Age at Fatal Incident over Time", subtitle = "Wildland Firefighters") + xlab("Date (years)") + ylab("Age (years)")
fire_main %>% drop_na(Date.of.Incident) %>% ggplot() + geom_histogram(aes(x=format(Date.of.Death, "%Y")), stat = "count") + labs(title = "Fatalities over Time", subtitle = "Non-wildland Firefighters") + xlab("Year") + ylab("Total Deaths")
fire_wild %>% drop_na(Date.of.Incident) %>% ggplot() + geom_histogram(aes(x=format(Date.of.Death, "%Y")), stat = "count") + labs(title = "Fatalities over Time", subtitle = "Wildland Firefighters") + xlab("Year") + ylab("Total Deaths")
